5/28 Introduction
5/28 Practice Activities

5/28 Part 1
Why Spring?

Spring in a Nutshell, Spring is sort of an alternative choice of JavaEE

What should we do?
JavaEE or Spring ?  -> BOTH!

/* 5/28 */

9. Spring Core Framework
Goal of Spring:
1. Lightweight development with Java POJOS(Plain old java object)

2. Dependency injection to promote loose coupling

3. Declaretive programming with Aspect-Oriented-Programming(AOP)

4. Minimize boilerplate(样板，引用) Java Code

Spring Core Container
1. Core Container
	- Factory for creating beans
	- Manage bean dependencies
2. Beans
3. Core
4. SpEL(Spring Expression Language)
5. Context

------

Spring Intrastructure
1. AOP(Aspect Oriented Programming)
	- Add functionality to objects declaratively
		- Logging Security transactions, etc...
2. Aspects
3. Instrumentation
4. Messaging

------

Spring Data Access Layer
1. JDBC
	- Collections of helper classes that help programmers accessing databse
	- Reduce source code by 50%

2. ORM(Object to Relational Mapping)
	- Integration with Hibernate and JPA
3. Transactions???
	- Makes heavy use of AOP behind the scenes
4. OXM
5. JMS(Java Message Service)
	- For sending async messages to a Message Broker
	- Spring Provides helper classes for JMS

------

Spring Web Layer
1. Servlet
2. WebSocket
3. Web
4. Portlet

------

Spring Test Layer
1. unit
2. Integration
3. Mock
	- Mock Objects and out-of-container Testing

/* 5/28 */

Spring "Projects"
What are Spring "Projects"
Additional Spring Modules built on top of the core Spring Framework 

Only use what you need: 
	- Spring Cloud, Spring Data
	- Spring Batch, Spring Security
	- Spring for Android, Spring Web Flow
	- Spring Web Services, Spring LDAP

/* 5/28 */
Spring Development Enviornment

Spring & Hibernate for Beginners
Inversion of Control(IoC)控制反转
Outsource to an object factory
- The approach of outsourceing the construction and management to objects

Primary functions
	-create and manage objects(inversion of Control)
	-Inject object's dependencies(Dependency Injection)

Configuring Spring Container
- XML configuration file(legacy, but most legacy apps still use this)
- Java Annotations(modern)
- Java Source Code(modern)

Spring Development Process
1. Configure your Spring Beans
2. Create a Spring Container
3. Retrieve Beans from Spring Container

What is Spring Beans:
A "Spring Bean" is simply a java object

Inject object's dependencies(Dependenct Injection)
There are many injection types with spring
The most common two types are:
	- Constructor Injection
	- Setter Injection

Injection values from a property file



/* 5/30 */
Bean Scopes
-Scope refers to the lifecycle of a bean
-How long does the bean live?
-How many instance are created?
-How is the bean shared?

Defauly bean scope is "Singleton"
and here are the additional spring scopes:
Singleton - Create a single shared instance of the bean. Default scope
prototype - Create a new bean instance for each container request
request - Scoped to an HTTP web request. Only for web apps
session - Scoped to an HTTP web session. Only for web apps
global-session - Scoped to a global http web session. Only used for web apps.

Bean Lifecycle
Container started -> Bean Instantiated -> Dependencies Injected -> Internal Spring Processing -> Your Custom Ini method -> Bean is ready for use(container is shutdown) ---
--> custom destroy method -> Stop


/* 5/31 */
What are Java annotations
- Special labels/markers added to Java classes
- Provide meta-data about the class
- Processed at compile time or run-time for special processing

Why Spring configuration with Annotations?
- XML configuration can be verbose
- Configure your Spring beans with Annotations
- Annotations minimized the XML configuration

- Spring will scan your java classes for special annotations
- Automatically register the beans in the Spring container

What is Spring AutoWiring?
For dependency injection, Spring can use auto wiring
Spring will lokk for a class that matches the property
	- mathces by type: class or interface
Spring will inject it aotomatically hence it is autowired

Autowiring type
All autowiring types are pretty much the same
- Constructor injection
- setter injection
- field injection(based on java Reflection, set the field value directly without any extra work like setter or constructor property)

@Qualifier to specify the actually implementation of the interface under @Autowire annotation
Apply @Qualifier annotation to
- Constructor injection
- Setter injection methods
- field Injection

/* 6/May/2019 */
Bean Scopes
- Scope refers to the lifecycle of a bean
- how long does the bean live?
- how many instances are created 
- how is the bean shared

Example:
Make use of @Scope("prototype")
to change the current bean's scope from singleton(default) to prototype

Bean Lifecycle Methods - Annotations
Bean lifecycle methods / hooks
- We can add custom code during bean initialization
	- Calling custom business logic methods
	- Setting up handles to resources(db, sockets, file etc)
- You can add custom code during bean destruction
	- Calling custom business logic method
	- clean up handles to resources(db, sockets, files etc)

Development Process:
1. Define your methods for init and destroy
2. Add annotations: @PostConstruct and @PreDestroy

Notes: 
! Void returm type is most commonly used since we are not be able to catch the result value.

!! For "Prototype" scoped beans, Spring does not call the @PreDestroy method!



Use Java Source code to configurate Spring Container
Notes:3 ways to configuring Spring Contianer
1. Full XML config
2. XML Component Scan
3. Java Configuration Class(no XML required)

*3*Java configuration
- Create a java class and annotate as @Configuration

- Add Component Scanning support: @ComponentScan(Optional)

- Read Spring Java Configuration class

- Retrieve bean from Spring Container


